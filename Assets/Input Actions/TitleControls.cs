//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Input Actions/TitleControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @TitleControls: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @TitleControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""TitleControls"",
    ""maps"": [
        {
            ""name"": ""TitleActions"",
            ""id"": ""de3566a4-d9db-4879-943d-421b0119acc0"",
            ""actions"": [
                {
                    ""name"": ""Start"",
                    ""type"": ""Button"",
                    ""id"": ""6c2a97d5-801b-4eff-9a73-133bb0ddbc34"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""f5ae73fc-8514-4ad8-879c-b034161ef5c5"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Start"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // TitleActions
        m_TitleActions = asset.FindActionMap("TitleActions", throwIfNotFound: true);
        m_TitleActions_Start = m_TitleActions.FindAction("Start", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // TitleActions
    private readonly InputActionMap m_TitleActions;
    private List<ITitleActionsActions> m_TitleActionsActionsCallbackInterfaces = new List<ITitleActionsActions>();
    private readonly InputAction m_TitleActions_Start;
    public struct TitleActionsActions
    {
        private @TitleControls m_Wrapper;
        public TitleActionsActions(@TitleControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Start => m_Wrapper.m_TitleActions_Start;
        public InputActionMap Get() { return m_Wrapper.m_TitleActions; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(TitleActionsActions set) { return set.Get(); }
        public void AddCallbacks(ITitleActionsActions instance)
        {
            if (instance == null || m_Wrapper.m_TitleActionsActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_TitleActionsActionsCallbackInterfaces.Add(instance);
            @Start.started += instance.OnStart;
            @Start.performed += instance.OnStart;
            @Start.canceled += instance.OnStart;
        }

        private void UnregisterCallbacks(ITitleActionsActions instance)
        {
            @Start.started -= instance.OnStart;
            @Start.performed -= instance.OnStart;
            @Start.canceled -= instance.OnStart;
        }

        public void RemoveCallbacks(ITitleActionsActions instance)
        {
            if (m_Wrapper.m_TitleActionsActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ITitleActionsActions instance)
        {
            foreach (var item in m_Wrapper.m_TitleActionsActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_TitleActionsActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public TitleActionsActions @TitleActions => new TitleActionsActions(this);
    public interface ITitleActionsActions
    {
        void OnStart(InputAction.CallbackContext context);
    }
}
